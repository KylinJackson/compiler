%{
#include <stdio.h>
#include <stdlib.h>
int yylex(void);
void yyerror();
%}

%token VARBEGIN VAREND INTEGER FUNCTION READ WRITE IF THEN ELSE L LE R RE E NE SUB SEM LPAR RPAR ASSIGN MUL NUMBER LETTER

%%

start: PROCEDURE { printf("acc\n"); }
PROCEDURE: SUBPROCEDURE
SUBPROCEDURE: VARBEGIN DECLARATIONSTATEMENTTABLE SEM EXECUTESTATEMENTTABLE VAREND
DECLARATIONSTATEMENTTABLE: DECLARATIONSTATEMENT | DECLARATIONSTATEMENTTABLE SEM DECLARATIONSTATEMENT
DECLARATIONSTATEMENT: VARIABLEDECLARATION | FUNCTIONDECLARATION
VARIABLEDECLARATION: INTEGER VARIABLEQUANTITY
VARIABLEQUANTITY: SYMBOL
SYMBOL: LETTER | SYMBOL LETTER | SYMBOL NUMBER
FUNCTIONDECLARATION: INTEGER FUNCTION SYMBOL LPAR PARAMETER RPAR SEM FUNCTIONBODY
PARAMETER: VARIABLEQUANTITY
FUNCTIONBODY: VARBEGIN DECLARATIONSTATEMENTTABLE SEM EXECUTESTATEMENTTABLE VAREND
EXECUTESTATEMENTTABLE: EXECUTESTATEMENT | EXECUTESTATEMENTTABLE SEM EXECUTESTATEMENT
EXECUTESTATEMENT: READSTATEMENT | WRITESTATMENT | ASSIGNMENTSTATEMENT | CONDITIONALSTATEMENT
READSTATEMENT: READ LPAR VARIABLEQUANTITY RPAR
WRITESTATMENT: WRITE LPAR VARIABLEQUANTITY RPAR
ASSIGNMENTSTATEMENT: VARIABLEQUANTITY ASSIGN ARITHMETICFAULTACCESS
ARITHMETICFAULTACCESS: ARITHMETICFAULTACCESS SUB TERM | TERM
TERM: TERM MUL FACTOR | FACTOR
FACTOR: VARIABLEQUANTITY | CONSTANT | FUNCTIONCALL
CONSTANT: UNSIGNEDINTEGER
UNSIGNEDINTEGER: NUMBER | UNSIGNEDINTEGER NUMBER
FUNCTIONCALL: SYMBOL LPAR ARITHMETICFAULTACCESS RPAR
CONDITIONALSTATEMENT: IF CONDITIONALEXPRESSION THEN EXECUTESTATEMENT ELSE EXECUTESTATEMENT
CONDITIONALEXPRESSION: ARITHMETICFAULTACCESS RELATIONOPERATOR ARITHMETICFAULTACCESS
RELATIONOPERATOR: L | LE | R | RE | E | NE

%%

void yyerror(char* str) {
	printf("yacc error: %s\n", str);
	exit(0);
}
